name: compile pipeline
description: Loads all components and compiles the pipeline
inputs:
- {name: Component specification dir, type: Directory}
- {name: Component names, type: List}
- {name: Pipeline name, type: String}
- {name: Pipeline code, type: String}
outputs:
- {name: Pipeline package, type: tar.gz}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'kfp==1.6.6' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'kfp==1.6.6' --user) && "$0" "$@"
    - python3
    - -u  # Auto-flush. We want the logs to appear in the console immediately.
    - -c  # Inline scripts are easy, but have size limitaions and the error traces do not show source lines.
    - |
      import kfp.components as comp 
      import kfp
      import sys
      import ast
      import importlib
      import kfp.dsl as dsl
      import kfp.components as comp    
      from pathlib import Path     
      Path(sys.argv[5]).mkdir(parents=True, exist_ok=True)
      component_name_list = ast.literal_eval(sys.argv[2])
      for component_name in component_name_list:  
          globals()[component_name] = comp.load_component_from_file(sys.argv[1]+"/"+component_name+"/component.yaml")
      pipeline_package_path = sys.argv[5] + "/" + sys.argv[3] + ".tar.gz"
      exec(sys.argv[4])
      kfp.compiler.Compiler().compile(locals()[sys.argv[3]],pipeline_package_path)
    - { inputPath: Component specification dir}
    - {inputValue: Component names}
    - {inputValue: Pipeline name}
    - {inputValue: Pipeline code}
    - {outputPath: Pipeline package}
